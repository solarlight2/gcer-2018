#include <kipr/botball.h>
const int DEPTH=0;
const int TOPHATR=4;
const int TOPHATL=5;
const int OPEN=400;
const int CLOSED=900;
const int UP = 1600;
const int DOWN = 350;
/*Intelligent Missions*/
//lines up with the crate
//for disruption:
//roll out for 4 seconds, disrupt, then move back and spit out
void mission1(int forwardTime, int second)
{	
    //picks up the cubes
    //while(analog(DEPTH)>2500)
    //{
    int t=seconds()+2;
    create_stop();
    msleep(100);
    /*while(seconds()<t)
    {
        if(analog(TOPHATR)<3000&&analog(TOPHATL)>3000){
            create_drive_direct(0,1200);
            msleep(1);
        }
        else if(analog(TOPHATR)>3000&&analog(TOPHATL)<3000){
            create_drive_direct(1200,0);
            msleep(1);
        }
        else
        {
            create_drive_direct(1200,1200);
            msleep(1);
        }
    }*/
    t=seconds()+1;
    while(seconds()<t)
    {
        printf("%d\n",analog(0));
        if(analog(TOPHATR)>2000)
        {
            create_drive_direct(1500,0);

        }
        else if(analog(TOPHATL)>2000)
        {
            create_drive_direct(0,1500);

        }
        else
        {
            create_drive_direct(1000,1500);
        }
    }
    while(analog(0)<1750)
    {
        printf("%d\n",analog(0));
        if(analog(TOPHATR)>2000)
        {
            create_drive_direct(375,250);

        }
        else if(analog(TOPHATL)>2000)
        {
            create_drive_direct(250,375);

        }
        else
        {
            create_drive_direct(250,375);
        }
    }

    /*create_drive_direct(100,100);
    	msleep(200);*/
    /*while(analog(0)<300)
    {
        create_drive_direct(120,-120);   
    }*/
    create_stop();
    msleep(100);
    create_drive_straight(100);
    msleep(1200);
    /*create_drive_direct(100,-100);
    msleep(1000);
    /*		while(analog(TOPHAT)<3000)
		{
			create_drive_direct(-500,500);
			msleep(100);
		}*/
    create_stop();
    /*    mav(2, 1400);
    msleep(4000);
             mav(2, -1400);
    msleep(4000);
    mav(2, 0);
    msleep(50);*/
    create_drive_straight(-100);
    msleep(50);
    /*Turn so that the robot can line follow
    create_drive_direct(100,-100);
    msleep(1000);
    create_drive_straight(-100);
    msleep(300);*/
    /*   while(analog(1)<2800)
    {
            create_drive_direct(100,-100);
    }*/
    create_drive_direct(0,-150);
    msleep(1700);
    while(analog(TOPHATL) < 3000){
        create_drive_direct(0,-150);
    }
    create_stop();
    msleep(100);
    create_drive_direct(-150,150);
    msleep(100);
    /*while(analog(TOPHATL) < 3000){
        create_drive_direct(150,-150);
    }*/
    create_stop();
    msleep(100);
    create_drive_direct(-150, 150);
    msleep(200);
    /*create_drive_straight(-100);
    msleep(700);
    set_servo_position(0,OPEN);
    msleep(100);
    create_drive_direct(-100,100);
    msleep(100);*/
    //straighen
    while(analog(TOPHATL) < 3000){
        create_drive_direct(150,-150);
    }
    while(analog(TOPHATR) < 2000){
        create_drive_direct(-150,150);
    }
    create_stop();
    msleep(100);


    create_stop();
    create_drive_direct(-100,100);
    msleep(200);
    create_stop();
	create_drive_direct(100,100);
    msleep(400);
    create_stop();
    msleep(100);
    t=seconds()+3;
    while(seconds()<t){
        if(analog(TOPHATR)>3000)
        {
            create_drive_direct(100,-10);

        }
        else if(analog(TOPHATL)>3000)
        {
            create_drive_direct(-10,100);

        }
        else
        {
            create_drive_direct(75,75);

        }
    }
	    while(analog(TOPHATL) < 3000){
        create_drive_direct(50,-50);
    }
    while(analog(TOPHATR) < 2000){
        create_drive_direct(-50,50);
    }
    create_stop();
    msleep(100);


    create_stop();
    //create_drive_direct(100,-100);
    //msleep(200);
    create_stop();
    create_drive_direct(13,13);
    msleep(1500);
    create_stop();
    msleep(100);
    set_servo_position(2,CLOSED);
    msleep(1000);
    create_drive_direct(100,-100);
    msleep(250);
   
    create_stop();


    set_servo_position(0,UP);
	msleep(100);
    mav(0,1500);
    mav(1,1500);
    msleep(6000);
    mav(0,0);
    mav(1,0);
    msleep(100);
    //create_drive_straight(-100);
    //msleep(300);
//disrupt
    create_drive_direct(100,-100);
    msleep(200);
    create_drive_direct(-100,100);
    msleep(400);
        
    create_stop();
    ao();
    msleep(100);
    //}

}
//puts the cube in the scoring zone
void mission2_2()
{

    int i=0;
    for(i;i<2;i++){
        //finds the right place for the cube
        while(get_object_center(0,0).x<100)
        {
            create_drive_direct(-100,-100);
            msleep(10);
            camera_update();
            msleep(100);
        }
        create_drive_direct(500,-500);
        msleep(500);
        //puts the cube in the right spot
        while(analog(DEPTH)>2500)
        {
            create_drive_direct(50,50);
            msleep(100);
        }
        //drop	
        //grab top

        //rollback transitional action
        while(analog(DEPTH)<2500)
        {
            create_drive_direct(-50,-50);
            msleep(100);
        }
        create_drive_direct(-500,500);
        msleep(500);
    }	
}
//finda the scoring zone
void locateZone()
{
    create_full();
    msleep(100);
    create_stop();
    msleep(1000);
    int i=0;
    camera_open();
    msleep(2000);
    int area=get_object_area(0,0);
    msleep(100);
    camera_close();
    msleep(100);
    while(area<100){

        if(create_connect_once()==0)
        {
            printf("Connection failed");   
        }
        int t=seconds()+3;
        while(seconds()<t)
        {
            if(analog(TOPHATR)>3000)
            {
                create_drive_direct(100,-10);

            }
            else if(analog(TOPHATL)>3000)
            {
                create_drive_direct(-10,100);

            }
            else
            {
                create_drive_direct(50,100);

            }
        }
        create_stop();
        camera_open();
        msleep(2000);
        int q=0;
        for(q=0;q<15;q++)
        {
            camera_update();
        }
        msleep(100);
        area=get_object_area(0,0);
        msleep(100);
        camera_close();
        msleep(100);
        printf("Area: %d\n",area);
        create_stop();
        msleep(100);
    }
}
//move forward or backwards
int forward(int lSpeed, int rSpeed, int finTime){
    int time = 0;

    while(time < finTime ){
        create_drive_direct(lSpeed, rSpeed);
        msleep(1);
        time += 1;    
    }

    return 0;
}
//This TURNS
int turn(int lSpeed ,int rSpeed, int finTime){

    int time = 0;

    while(time < finTime){
        create_drive_direct(lSpeed, rSpeed);
        msleep(1);
        time += 1;
    }
    return 0;
}
//Follows a black line
int lineFollow(int ftime, int lSpeed, int rSpeed, int topHatSensor){
    int time = 0;
    while(time < ftime){
        if(analog(topHatSensor) < 1500){
            create_drive_direct(lSpeed, rSpeed);
            msleep(1);
            time += 1;
        }
        else{
            create_drive_direct(rSpeed, lSpeed);
            msleep(1);
            time += 1;
        }
    }

    return 0;
}
//moves forward till a black line comes up
int forwardTillLine(topHatSensor,black, lSpeed, rSpeed)
{
    while(analog(topHatSensor) < black)
    {
        create_drive_direct(lSpeed, rSpeed);
    }
    return 0;
}
//Pulls claw up with string for certain amount of time
int up(claw, upTime)
{
    mav(claw, 1000);
    msleep(upTime);

    return 0;
}
//Gives Leeway with string, then shakes to fall down just in case it does not free fall
int down(left, right, claw, downTime)
{
    mav(claw, 600);
    msleep(-1000);
    int time = 0;	

    while(time < downTime){
        if(time/2 == 0)
        {
            create_drive_direct(300, -300);
            msleep(1);
            time += 1;
        }
        else
        {
            create_drive_direct(-300, 300);
            msleep(1);
            time += 1;  
        }
    }
    return 0;
}
int trap(int rollout){
    mav(rollout, -1000);
    msleep(2000);

    mav(rollout, 1000);
    msleep(5000);
}/*
int mission1IlanMode(int depthSensor, int depth){
    while(analog(3) < 2000){
         int t = seconds() + 5;
    while(seconds() < t)
    {
        if(analog(TOPHATL)<2000 && analog(TOPHATR) > 2000)
        {
            create_drive_direct(175,350);
            msleep(10);
            create_stop();
            msleep(100);
        }
        else if(analog(TOPHATR)<2000 && analog(TOPHATL) > 2000)
        {
            create_drive_direct(350,175);
            msleep(100);    
            create_stop();
            msleep(50);
        }
       else 
       {
            create_drive_direct(250,250);
            msleep(100);
        }
    }
    create_stop();
    msleep(100);

    create_drive_direct(100,-100);
    msleep(3000);    
    create_stop();
    msleep(100);

    mav(0, 100);
        mav(1,100);
        msleep(1000);

        create_straight(-100);
        msleep(1000);


    }
}*/


int main()
{
    enable_servos();
    msleep(100);
    create_full();
    msleep(2000);
    printf("in fullmode\nattempting to connect...\n");
    int attempt=0;
    while(create_connect_once()==0){
        attempt++;
        printf("attempt %i ---> Connection failed\n",attempt);
    }
    printf("attempt %i ---> WE DID IT!!\n",attempt);
    //create_connect();
    msleep(100);
    printf("connected hopefully okay\n");
    msleep(100);
    //camera_open();
    //msleep(100);
    printf("fuckbois");
    msleep(100);
    wait_for_light(2);
    msleep(10);
    shut_down_in(118);
    msleep(10);
    int topHatSensor = 1;
    int depthSensor = 0;
    int arm = 2;
    int claw = 1;
    int igus = 0;
    int close = 1400;

    //This part closes and raises the claw
    set_servo_position(3, close);
    msleep(100);

    ao();
    msleep(10);
    //Turn Left because is veers right when driving
    create_drive_direct(-150, 150);
    msleep(300);

    //Moves past both lines
    create_drive_straight(200);
    msleep(2000);


    //moves backwards till second line
    forwardTillLine(TOPHATL, 2000, -100, -100);
    create_stop();
    msleep(100);

    //Moves forward so when turns kinda hits line
    create_drive_straight(100);
    msleep(2000);

    while(analog(TOPHATR) < 3000){
        create_drive_direct(-150,150);
    }
    create_stop();
    msleep(100);
    create_drive_direct(-150,150);
    msleep(100);
    while(analog(TOPHATL) < 3000){
        create_drive_direct(150,-150);
    }
    create_stop();
    msleep(100);

    create_drive_direct(-150, 150);
    msleep(200);
	
	//grabs cube
    mission1(10, 0);
    mav(0,-1000);
    mav(1,-1000);
    msleep(3500);
    mav(0,0);
    mav(1,0);
    set_servo_position(0,UP);
    msleep(100);
    //backs out of zone
	msleep(100);
    create_drive_direct(50,-50);
    msleep(300);
    create_drive_direct(-200,-200);
    msleep(2500);
    create_stop();
    create_drive_straight(100);
    msleep(100);
    create_stop();
    msleep(100);
    mav(2,1000);
    msleep(7000/3);
    mav(2,0);

    ao();
    msleep(100);

    mav(2,1400);
    msleep(200/3);
    mav(2,0);
    msleep(100);
    create_drive_straight(100);
    msleep(700);

    create_drive_straight(100);
    msleep(500);

    create_drive_direct(-100, 100);
    msleep(1000);

    create_stop();
    msleep(100);

	//line follow to end zone area
    create_drive_straight(200);
    msleep(800);
    while(analog(TOPHATR) < 2000){
        create_drive_direct(-150,150);
    }
    int t=seconds()+10;
    /*while(seconds()<t)*/
	while(seconds()<t)
    {
        if(analog(TOPHATR)>2000)
        {
            create_drive_direct(100,0);

        }
        else if(analog(TOPHATL)>3000)
        {
            create_drive_direct(0,100);

        }
        else
        {
            create_drive_direct(0,100);
        }   
    }
    create_stop();
    msleep(100);
    printf("Done folloing");
    create_drive_direct(200,-200);
    msleep(700);
    while(analog(TOPHATL) < 3000){
        create_drive_direct(200,-200);

    }
    create_stop();
    msleep(100);
    while(analog(TOPHATR) < 2000){
        create_drive_direct(-200,200);
    }
    create_stop();
    msleep(100);
    create_drive_direct(100,-100);
    msleep(400);
    create_stop();msleep(100);
    mav(2,1000);
    msleep(1000/3);
    mav(2,0);
    msleep(100);
	//find zone
    locateZone();
    msleep(100);
    create_stop();
    msleep(100);
    camera_open();
    msleep(2000);
    camera_update();
    msleep(100);
	int center=get_object_center(0,0).x;
    //line up robot
    do
    {
        //create_drive_direct(-100,-100);
        //msleep(300);
         if(analog(TOPHATR)>3000)
        {
            create_drive_direct(100,-100);
			msleep(100);
        }
        else if(analog(TOPHATL)>3000)
        {
            create_drive_direct(-100,100);
			msleep(100);
        }
        else
        {
            create_drive_direct(-75,-75);
			msleep(500);
        }
        create_stop();
        msleep(100);
        camera_open();
        msleep(1000);
		int i=0;
		for(i=0;i<10;i++)
		{
        camera_update();
        msleep(10);
		}
        center=get_object_center(0,0).x;
        printf("%d\n",center);
		msleep(100);
        camera_close();
        msleep(100);
    }while(center>35);
    create_stop();

    /*create_stop();
	create_spin_CW(120);
	msleep(1250);*/
    set_create_normalized_angle(0);
    msleep(100);
    create_spin_CW(50);
    while(get_create_normalized_angle(0.0)>=-108)
    {
        msleep(1);
    }
    create_stop();
    create_spin_CW(50);
    msleep(100);
    create_spin_CCW(50);
    msleep(200);
    //-------------SCORE-----------------
   set_servo_position(0,DOWN);
   msleep(100);
    
    create_drive_direct(-100,100);
    msleep(100);
    create_stop();
    int time=seconds()+5;
    while(analog(TOPHATL) < 3000 || analog(TOPHATR) < 2000&&time<seconds()){
		create_drive_straight(50);
    }
    printf("Aligned");
	create_stop();
    msleep(1000);
	while(analog(TOPHATL) < 2000)
	{
		create_drive_direct(50,0);
	}
	while(analog(TOPHATR) < 2000)
	{
		create_drive_direct(0,50);
	}
    create_stop();
    msleep(100);
    set_servo_position(2,0);
    msleep(100);
	//create_drive_straight(100);
	//msleep(800);
    create_stop();
	//ensure frst cube is in the zone
	//create_drive_direct(-100,100);
	//msleep(175);
	
    set_servo_position(2,OPEN);
    msleep(100);

    

    create_stop();
    create_drive_direct(-100,-100);
    msleep(300);
    create_drive_straight(100);
    msleep(300);
    create_drive_direct(100, -100);
    msleep(200);
	create_disconnect();
    msleep(100);
    disable_servos();
    msleep(100);
	



	
    
    return 0;
}
